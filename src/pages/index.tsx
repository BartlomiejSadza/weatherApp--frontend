import Head from "next/head";
import localFont from "next/font/local";
import styles from "@/styles/Home.module.css";
import Column from "./components/column";
import { useEffect, useState } from "react";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

interface WeatherData {
  date: string;
  weatherCode: number;
  temperature2mMax: number;
  temperature2mMin: number;
  estimatedEnergy: number;
}

interface WeeklyData {
    averagePressure: number,
    averageSunshineDuration: number,
    maxTemperature: number,
    minTemperature: number,
    precipitationDays: number,
    weatherSummary: string,
    windAverage: number
}

export async function getServerSideProps() {
  let lat = 30;
  let lon = 20;
  const res = await fetch(`https://backend-weatherapp-2oet.onrender.com/endpoint1?lat=${lat}&lon=${lon}`);
  const data: WeatherData[] = await res.json();
  const res2 = await fetch(`https://backend-weatherapp-2oet.onrender.com/endpoint2?lat=${lat}&lon=${lon}`);
  const data2: WeeklyData = await res2.json();

  return {
    props: {
      weatherData: data,
      weeklyData: data2,
    },
  };
}

interface HomeProps {
  weatherData: WeatherData[];
  weeklyData: WeeklyData;
}

export default function Home({ weatherData, weeklyData }: HomeProps): JSX.Element {
  const [location, setLocation] = useState<{ lat: number; lon: number } | null>(null);
  const [updatedWeatherData, setUpdatedWeatherData] = useState<WeatherData[]>(weatherData);
  const [updatedWeeklyData, setUpdatedWeeklyData] = useState<WeeklyData>(weeklyData);

  // Pobieranie coordow uzytkownika 
  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition((position) => {
        setLocation({ 
          lat: parseFloat(position.coords.latitude.toFixed(3)),
          lon: parseFloat(position.coords.longitude.toFixed(3))
        });
        console.log(position.coords);
      });
    }
  }, []);

  // MIEJSCE NA DRUGI HOOK AKTUALIZUJACY ZMIANY WYWOLANE PRZEZ PIERWSZY 

  // PIERWSZY ENDPOINT 

  useEffect(() => {
    if (location) {
      const fetchWeatherData = async () => {
        try {
          console.log(`Fetching weather data for location: lat=${location.lat}, lon=${location.lon}`);
          const res = await fetch(`/api/endpoint1?lat=${location.lat}&lon=${location.lon}`);
          if (!res.ok) {
            throw new Error(`HTTP error! status: ${res.status}`);
          }
          const data: WeatherData[] = await res.json();
          setUpdatedWeatherData(data);
        } catch (error) {
          console.error("Failed to fetch weather data:", error);
        }
      };
      fetchWeatherData();
      console.log(updatedWeatherData)
    }
  }, [location]);

  // DRUGI ENDPOINT

  useEffect(() => {
    if (location) {
      const fetchWeatherData = async () => {
        try {
          console.log(`lokalizacja: lat=${location.lat}, lon=${location.lon}`);
          const res = await fetch(`/api/endpoint2?lat=${location.lat}&lon=${location.lon}`);
          if (!res.ok) {
            throw new Error(`HTTP error! status: ${res.status}`);
          }
          const data: WeeklyData = await res.json();
          setUpdatedWeeklyData(data);
        } catch (error) {
          console.error("Failed to fetch weather data:", error);
        }
      };
      fetchWeatherData();
      console.log(updatedWeeklyData)
    }
  }, [location]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={`${styles.page} ${geistSans.variable} ${geistMono.variable}`}>
        <main className={styles.main}>
          <div className={styles.columnsContainer}>
            {updatedWeatherData.map((data) => (
              <Column
                key={data.date}
                date={data.date}
                weatherCode={data.weatherCode}
                temperature2mMax={data.temperature2mMax}
                temperature2mMin={data.temperature2mMin}
                estimatedEnergy={data.estimatedEnergy}
              />
            ))}
          </div>
          {/* Tygodniowe podsumowanie */}
          <div className={styles.week}>
            
          </div>
        </main>
      </div>
    </>
  );
}
